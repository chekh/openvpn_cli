# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Typer
# –§—É–Ω–∫—Ü–∏–∏:
# - –ë–∞–∑–∞ –∞–¥—Ä–µ—Å–æ–≤ (–≤ JSON)
# - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –∏–ª–∏ IP
# - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞
# - –†–µ–∑–æ–ª–≤–∏–Ω–≥
# - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OpenVPN-–∫–æ–Ω—Ñ–∏–≥–∞ —Å –≤–µ—Ä—Å–∏–µ–π

import logging
import os
import socket
import sys
from datetime import datetime
from logging.handlers import RotatingFileHandler
from pathlib import Path
from typing import List, Optional

import typer
import yaml
from dotenv import load_dotenv

from .certs import CertManager

app = typer.Typer()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env
load_dotenv()

# README
README_PATH = 'README.md'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = Path(os.getenv('LOG_FILE_PATH', 'app.log'))
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()

logging.basicConfig(
    level=LOG_LEVEL,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler(LOG_FILE, maxBytes=1024*1024, backupCount=5),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
CONFIGS_DIR = Path(os.getenv('CONFIGS_DIR', 'configs'))
cert_manager = CertManager(CONFIGS_DIR)

# –ü—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º
BASE_CONFIG_PATH = CONFIGS_DIR / 'base' / 'base_config.ovpn'
ADDRESS_DB_PATH = CONFIGS_DIR / 'addresses.yaml'
OVPN_OUTPUT_PATH = CONFIGS_DIR / 'new_configs' / 'custom.ovpn'

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_base_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"""
    if not BASE_CONFIG_PATH.exists():
        logger.error("–§–∞–π–ª –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return ""
    
    try:
        base_config = BASE_CONFIG_PATH.read_text()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        cert_data = cert_manager.load_latest_cert()
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –∫–æ–Ω—Ñ–∏–≥
        if cert_data:
            for tag, content in cert_data.items():
                if content:
                    base_config = base_config.replace(
                        f"<{tag}>\n</{tag}>",
                        f"<{tag}>\n{content}\n</{tag}>"
                    )
        
        return base_config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return ""

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–∞
def load_addresses():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    if not ADDRESS_DB_PATH.exists():
        logger.info("–§–∞–π–ª –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ")
        return {"addresses": []}
    try:
        with ADDRESS_DB_PATH.open("r") as f:
            return yaml.safe_load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤: {e}")
        return {"addresses": []}

@app.command()
def setup_configs(base_config: str, configs_dir: str):
    """
    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –∏–∑–≤–ª–µ—á—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    
    Args:
        base_config: –ü—É—Ç—å –∫ –±–∞–∑–æ–≤–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É
        configs_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        base_dir = Path(configs_dir) / "base"
        new_configs_dir = Path(configs_dir) / "new_configs"
        
        base_dir.mkdir(parents=True, exist_ok=True)
        new_configs_dir.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
        base_config_path = Path(base_config)
        if not base_config_path.exists():
            raise FileNotFoundError(f"–ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {base_config}")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥–∞
        config_content = base_config_path.read_text()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –≤–∞–∂–Ω—ã–µ —Ç–µ–≥–∏
        cert_data = {}
        important_tags = ["ca", "cert", "key", "tls-auth", "tls-crypt"]
        
        for tag in important_tags:
            start_tag = f"<{tag}>"
            end_tag = f"</{tag}>"
            start_idx = config_content.find(start_tag)
            end_idx = config_content.find(end_tag)
            
            if start_idx != -1 and end_idx != -1:
                start_idx += len(start_tag)
                content = config_content[start_idx:end_idx].strip()
                if content:
                    cert_data[tag] = content
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏
                    config_content = config_content.replace(
                        f"{start_tag}\n{content}\n{end_tag}",
                        f"{start_tag}\n{end_tag}"
                    )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        (base_dir / "base_config.ovpn").write_text(config_content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        if cert_data:
            version = datetime.now().strftime("%Y%m%d_%H%M%S")
            cert_manager.save_cert(cert_data, version)
            typer.echo(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–µ—Ä—Å–∏—é: {version}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –∞–¥—Ä–µ—Å–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        address_db_path = Path(configs_dir) / "addresses.yaml"
        if not address_db_path.exists():
            address_db_path.write_text("addresses: []\n", encoding='utf-8')
        
        typer.echo("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:")
        typer.echo(f"  - –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥: {base_dir / 'base_config.ovpn'}")
        typer.echo(f"  - –ë–∞–∑–∞ –∞–¥—Ä–µ—Å–æ–≤: {address_db_path}")
        typer.echo(f"  - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {new_configs_dir}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")
        raise typer.Exit(code=1)


def save_addresses(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≤ YAML —Ñ–∞–π–ª"""
    try:
        with ADDRESS_DB_PATH.open("w") as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True)
        logger.info("–ê–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤: {e}")
        raise


def resolve_address(addr: str) -> List[str]:
    try:
        socket.inet_aton(addr)
        return [addr]
    except OSError:
        pass

    try:
        return socket.gethostbyname_ex(addr)[2]
    except socket.gaierror:
        return []


@app.command()
def add(addr: str, name: Optional[str] = None):
    """
    –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –∏–ª–∏ IP –≤ –±–∞–∑—É
    """
    addresses = load_addresses()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if any(a.get('name') == name for a in addresses['addresses']):
        typer.echo(f"‚ö†Ô∏è –ê–¥—Ä–µ—Å —Å –∏–º–µ–Ω–µ–º {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
    try:
        socket.inet_aton(addr)
        address_type = "ip"
    except OSError:
        address_type = "domain"
    
    new_address = {
        "name": name or addr,
        "type": address_type,
        "address": addr,
        "added_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "resolved_ips": []
    }
    
    addresses['addresses'].append(new_address)
    save_addresses(addresses)
    typer.echo(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {new_address['name']} ({addr})")


@app.command()
def list():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤/IP –≤ –±–∞–∑–µ
    """
    addresses = load_addresses()
    if not addresses['addresses']:
        typer.echo("üì≠ –ë–∞–∑–∞ –ø—É—Å—Ç–∞.")
    else:
        typer.echo("üìö –ê–¥—Ä–µ—Å–∞ –≤ –±–∞–∑–µ:")
        for i, addr in enumerate(addresses['addresses'], 1):
            typer.echo(f"{i:>2}. {addr['name']} ({addr['address']})")
            if addr['resolved_ips']:
                typer.echo(f"    –†–µ—à–µ–Ω–Ω—ã–µ IP: {', '.join(addr['resolved_ips'])}")
            typer.echo(f"    –¢–∏–ø: {addr['type']}")
            typer.echo(f"    –î–æ–±–∞–≤–ª–µ–Ω: {addr['added_at']}")
            typer.echo()


@app.command()
def generate(version: Optional[str] = None):
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OpenVPN-–∫–æ–Ω—Ñ–∏–≥ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    """
    addresses = load_addresses()
    seen_ips = set()
    base_config = load_base_config()
    route_lines = []

    for addr in addresses['addresses']:
        if addr['type'] == 'domain':
            resolved_ips = resolve_address(addr['address'])
            addr['resolved_ips'] = resolved_ips
        else:
            resolved_ips = [addr['address']]

        for ip in resolved_ips:
            if ip not in seen_ips:
                seen_ips.add(ip)
                route_lines.append(f"route {ip} 255.255.255.255")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ IP
    save_addresses(addresses)

    version_tag = version or datetime.utcnow().strftime("%Y%m%d%H%M%S")
    header = f"# Autogenerated OpenVPN config\n# Version: {version_tag}"

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä—Å–∏–∏
    output_path = CONFIGS_DIR / "new_configs" / f"custom_{version_tag}.ovpn"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = f"{header}\n\n{base_config.strip()}\n\n" + "\n".join(route_lines) + "\n"
    output_path.write_text(config)

    typer.echo(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {output_path} (–≤–µ—Ä—Å–∏—è: {version_tag})")


@app.command()
def cert_list():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    """
    versions = cert_manager.list_versions()
    if not versions:
        typer.echo("‚ö†Ô∏è –ù–µ—Ç –≤–µ—Ä—Å–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        return

    typer.echo("üìö –í–µ—Ä—Å–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:")
    for i, version in enumerate(versions, 1):
        typer.echo(f"{i:>2}. {version}")


@app.command()
def cert_restore(version: str):
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    """
    if cert_manager.restore_version(version):
        typer.echo(f"‚úÖ –í–µ—Ä—Å–∏—è {version} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        typer.echo(f"‚ùå –í–µ—Ä—Å–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


if __name__ == "__main__":
    try:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–≤–æ–¥–∏–º README
        if len(sys.argv) == 1:
            with open(README_PATH, "r", encoding="utf-8") as f:
                print(f.read())
        else:
            app()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
